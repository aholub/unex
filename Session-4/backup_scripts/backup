#!/bin/bash
# backup the current site to the repo, along with the database
# usage:
#     backup [optional commit message]

. ./backup_settings

echo "backing up $website: $(date)" >> $backupLog

# If a commit message is specified on the script command line, use it
# instead of the default

if (( $# > 0 )) ; then
	commitMessage="$@"
fi

echo "$commitMessage"

mkdir -p db_backup

# Git's delta-compression algorithm does a better job on text files than
# binary ones. Consequently, it may be better to just skip the bzip
# step altogether and just store the raw SWL file generated by mysqldump.
# If you do that, then change the "restore" script as well.

# Also, on a live site, you should really shut down wordpress while the
# backup is in progress if there can be any sort of user-side modification
# (e.g. comments or accounts being created). Otherwise, you run the risk
# of backing up a database that was in an unstable state. The safest approach
# is to put the site into  some kind of maintenance mode (e.g.
# https://wordpress.org/plugins/rocket-maintenance-mode/). Whatever you do,
# don't back up the database while Wordpress is in the middle of doing something
# with it. Finally, check out the Backup Buddy plug-in, which is quite nice
# but pricey ($80/year +). Also, read https://codex.wordpress.org/WordPress_Backups

set -x
mysqldump --add-drop-table -h $db_host -u $db_user -p$db_pass $db | bzip2 -c > $backupFile 
git add .
git commit -m "$commitMessage"

git push
set +x
